// Generated by CoffeeScript 1.7.1
(function() {
  var board, existInBoard, fillCards, lastmove, randomIndex, shuffle, used, writeBoard;

  board = [];

  used = [];

  lastmove = -1;

  $(function() {
    var checkmatch, dimensions, hide, i, length, show, _i;
    dimensions = prompt("Please enter an even number");
    dimensions = Math.pow(dimensions, 2) - 1;
    for (i = _i = 0; 0 <= dimensions ? _i <= dimensions : _i >= dimensions; i = 0 <= dimensions ? ++_i : --_i) {
      $('.board').append("<div class='cell' id=" + i + "><p>a</p></div>");
      board.push(0);
    }
    length = 100 * Math.sqrt(board.length);
    $('.board').css("width", "" + length + "px");
    $('.board').css("height", "" + length + "px");
    fillCards();
    writeBoard();
    show = function(arrayID) {
      return $("#" + arrayID).html("<img src=images/" + board[arrayID] + ".jpg>");
    };
    hide = function(id1, id2) {
      return delay(500, function() {
        $("#" + id1).html('');
        return $("#" + id2).html('');
      });
    };
    window.delay = function(ms, fn) {
      return setTimeout(fn, ms);
    };
    checkmatch = function(id) {
      if (board[id] === board[lastmove]) {
        return true;
      }
      return false;
    };
    return $('.cell').click(function() {
      i = parseInt($(this).attr('id'));
      console.log(" " + i + " " + board[i]);
      if ($("#" + i).html() === "") {
        show(i);
        if ((checkmatch(i) === false) && (lastmove > -1)) {
          console.log("checkmatch: " + i + " " + lastmove);
          hide(i, lastmove);
          return lastmove = -1;
        } else if ((checkmatch(i) === false) && (lastmove === -1)) {
          console.log("checkmatch: " + i + " " + lastmove);
          return lastmove = i;
        } else {
          console.log("checkmatch: " + i + " " + lastmove);
          return lastmove = -1;
        }
      }
    });
  });

  writeBoard = function() {
    var i, _i, _ref, _results;
    _results = [];
    for (i = _i = 0, _ref = board.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      _results.push($("#" + i).html(""));
    }
    return _results;
  };

  randomIndex = function(x) {
    var i;
    i = Math.floor(Math.random() * x);
    if (existInBoard(i, used) === false) {
      used.push(i);
      return i;
    } else {
      return randomIndex(x);
    }
  };

  shuffle = function(a) {
    var i, j, _i, _ref, _ref1;
    for (i = _i = _ref = a.length - 1; _ref <= 1 ? _i <= 1 : _i >= 1; i = _ref <= 1 ? ++_i : --_i) {
      j = Math.floor(Math.random() * (i + 1));
      _ref1 = [a[j], a[i]], a[i] = _ref1[0], a[j] = _ref1[1];
    }
    return a;
  };

  fillCards = function() {
    var itemID, n, newArray, _i, _j, _ref, _ref1, _results;
    newArray = [];
    console.log("fill");
    for (n = _i = 0, _ref = (board.length / 2) - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; n = 0 <= _ref ? ++_i : --_i) {
      itemID = randomIndex(8);
      newArray.push(itemID);
      newArray.push(itemID);
    }
    newArray = shuffle(newArray);
    console.log(newArray);
    _results = [];
    for (n = _j = 0, _ref1 = newArray.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; n = 0 <= _ref1 ? ++_j : --_j) {
      _results.push(board[n] = newArray[n]);
    }
    return _results;
  };

  existInBoard = function(item, newArray) {
    var n, _i, _ref;
    for (n = _i = 0, _ref = newArray.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; n = 0 <= _ref ? ++_i : --_i) {
      if (newArray[n] === item) {
        return true;
      }
    }
    return false;
  };

}).call(this);

//# sourceMappingURL=main.map
